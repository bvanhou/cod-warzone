{"version":3,"sources":["useCanvas.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","draw","ctx","location","coordinates","setClickedContract","type","locationX","x","locationY","y","fillStyle","shadowColor","shadowBlur","save","scale","translate","rotate","Math","PI","fill","canvas","addEventListener","event","clientX","clientY","console","log","isPointInPath","offsetX","offsetY","contract","find","element","point","el","sqrt","restore","useCanvas","canvasRef","useRef","menuRef","useState","setCoordinates","clickedContract","start","setStart","useEffect","current","getContext","menu","_corrdinate","length","style","left","top","drawMenu","clearRect","forEach","coordinate","parentId","id","api","axios","create","baseURL","process","App","currentCoord","setCurrentCoord","contractCoord","setContractCoord","reconCoord","setReconCord","e","preventDefault","removeAllCorrdinates","a","iterations","delete","get","then","res","_coordinates","data","className","src","warzone","alt","ref","width","height","onClick","_currentCoord","_","isEmpty","filter","obj","zIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1237c615.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nfunction isIntersect(point, el) {\n    return Math.sqrt((point.x-el.x) ** .5 + (point.y - el.y) ** .5) < 10;\n}\n\nexport function draw(ctx, location, coordinates, setClickedContract){\n    if(location.type){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        ctx.fillStyle = location.type === 'contract' ? 'red': 'blue';\n        ctx.shadowColor = 'blue';\n        ctx.shadowBlur = 15;\n        ctx.save();\n        ctx.scale(SCALE, SCALE);\n        ctx.translate(locationX / SCALE - OFFSET, locationY / SCALE - OFFSET);\n        ctx.rotate(225 * Math.PI / 180);\n        ctx.fill(SVG_PATH);\n\n        ctx.canvas.addEventListener('click',(event)=> {\n            let x = 100 / (canvasWidth / event.clientX);\n            let y = 100 / (canvasHeight / event.clientY);\n\n            console.log(ctx.isPointInPath(SVG_PATH, event.offsetX, event.offsetY))\n\n            let contract = coordinates.find((element) => {\n                return element.type && isIntersect({ x, y }, element)\n            });\n            if(contract) setClickedContract(contract)\n            else setClickedContract({})\n        });\n        ctx.restore();  \n    }\n};\n\nexport const drawMenu = (menu, location) =>{\n    if(location){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        menu.style.left = `${locationX}px`;\n        menu.style.top = `${locationY}px`;\n    }\n}\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n    const [clickedContract, setClickedContract] = useState({});\n\n    const [start, setStart] = useState(false);\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        const menu = menuRef.current;\n        const _corrdinate = coordinates[coordinates.length-1];\n        // Draw Context Menu \n        if(!start)    \n            drawMenu(menu, coordinates[coordinates.length-1]);\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{\n            if(coordinate.type !== 'recon'){\n                draw(ctx, coordinate, coordinates, setClickedContract)\n            }else if(coordinate.parentId === _corrdinate.id || coordinate.id === _corrdinate.id){\n                draw(ctx, coordinate, coordinates, setClickedContract)\n                console.log(coordinate)\n            }\n        });\n\n\n    });\n\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart, clickedContract, setClickedContract ];\n}\n","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useEffect, useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nconst { REACT_APP_API_URL } = process.env;\n\nconst api = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\n\n\n\nfunction App() {\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart, clickedContract ] = useCanvas();\n  const [ currentCoord, setCurrentCoord ] = useState({})\n  const [ contractCoord, setContractCoord ] = useState({})\n  const [ reconCoord, setReconCord ] = useState(false)\n\n  window.addEventListener('contextmenu', function (e) { \n    e.preventDefault(); \n  }, false);\n  \n  const removeAllCorrdinates = async () => {\n    let iterations = coordinates.length;\n\n    for (const coordinate of coordinates) {\n      if(coordinate.id){\n        await api.delete(`${coordinate.id}`);\n      }\n\n      if (!--iterations)\n        setCoordinates([]);\n    }\n  }\n\n\n  const handleCanvasClick=(event)=>{\n    setStart(false)\n\n    let _currentCoord  = {\n      id: null,\n      parentId: null,\n      x: 100 / (canvasWidth / event.clientX), \n      y: 100 / (canvasHeight / event.clientY),\n      type: null\n    };\n    console.log(clickedContract)\n    console.log(_currentCoord)\n    console.log(contractCoord)\n\n    if(_.isEmpty(clickedContract)){\n      console.log('test')\n\n      // _currentCoord.parentId = ( clickedContract.type === 'contract')? clickedContract.id: null;\n      setCurrentCoord(_currentCoord);\n      setCoordinates([...coordinates, _currentCoord]);\n    } \n    // else if( clickedContract.type === 'contract' ){\n    //   _currentCoord.parentId = clickedContract.id\n    //   setCurrentCoord(clickedContract);\n    //   setCoordinates([...coordinates]);\n    // }\n    else{\n      console.log('yay')\n      setCurrentCoord(clickedContract);\n      setContractCoord(clickedContract)\n      setCoordinates([...coordinates, _currentCoord]);\n    }\n\n\n    // Object.assign(_currentCoord,\n    //   (reconCoord) ? { type: 'recon'} : null);\n\n    //   // api.post(\"\",{ ..._currentCoord })\n    //   // .then(res => {\n    //   //   setContractCoord(res.data)\n    //   //   setCoordinates([...coordinates, res.data]);\n    //   // })\n\n    // if(reconCoord) setReconCord(false);\n\n    // setCurrentCoord(_currentCoord);\n    // setCoordinates([...coordinates, _currentCoord]);\n    // console.log(_currentCoord)\n\n  };\n  const handleClearCanvas=(event)=>{\n    removeAllCorrdinates();\n  };\n\n  const doAddContract = (event) =>{\n    // currentCoord.type = 'contract' ;\n    // console.log(currentCoord)\n    // add the newest mouse location to an array in state \n    // api.post(\"\",{ ...currentCoord })\n    // .then(res => {\n    //   setContractCoord(res.data)\n    //   setCoordinates([...coordinates, res.data]);\n    // })\n\n  }\n  const doAddRecon = () =>{\n    setReconCord(true)\n    // const { x, y } = currentCoord;\n    // const _currentCoord = { parentId: clickedContract.id,  x, y, type: 'recon' };\n\n    // const canvasObj = canvasRef.current;\n    // const ctx = canvasObj.getContext('2d');\n\n    // ctx.canvas.addEventListener('mousemove', e => {\n    //   ctx.save();\n    //   ctx.clearRect(0, 0, canvasWidth, canvasHeight)\n\n    //   // Get the local x/y coordinates of the mouse on the canvas\n    //   let x = e.clientX;\n    //   let y = e.clientY;\n    //   // Draw a dot where the mouse is\n    //   ctx.beginPath();\n    //   ctx.arc(x, y, 10, 0, 2 * Math.PI, false);\n    //   ctx.fillStyle = 'white';\n    //   ctx.fill();\n    //   ctx.save();\n    //   ctx.restore();\n    // })\n    \n    // console.log(_currentCoord)\n    // setCoordinates([...coordinates, _currentCoord]);\n  }\n  const doRemove = () =>{\n    const _coordinates = coordinates.filter((obj) => {\n      return obj.x !== currentCoord.x && obj.y !== currentCoord.y\n    })\n    if(currentCoord.type === 'recon'){\n      setReconCord(false);\n    }\n\n    setCoordinates([..._coordinates]);\n  }\n\n  useEffect(() =>{\n    api.get()\n      .then(res => {\n        const _coordinates = res.data;\n        setStart(true)\n        setCoordinates(_coordinates);\n      })\n  },[setCoordinates, setStart])\n \n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img  src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\" >\n          { \n            !reconCoord && \n            <div className=\"contextMenu--contract\" onClick={doAddContract} >Start Contract</div>\n          }\n          { \n            (clickedContract.type === 'contract') && \n            <div className=\"contextMenu--recon\" onClick={doAddRecon} >Add Recon</div>\n          }\n          {\n            reconCoord && \n            <div className=\"contextMenu--remove\" onClick={doRemove} >Remove</div>\n          }\n      </div>\n\n      \n      <div className=\"clearButton\" style={{zIndex:1000}}>\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div>\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}