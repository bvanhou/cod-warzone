{"version":3,"sources":["useContract.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["Contract","window","innerWidth","innerHeight","props","console","log","state","isMouseInside","handleMouseEnter","bind","handleMouseLeave","this","setState","x","y","radius","fill","stroke","strokeWidth","onMouseEnter","onMouseLeave","React","Component","api","axios","create","baseURL","process","canvasWidth","canvasHeight","App","useState","setCoordinates","useEffect","get","then","res","_coordinates","data","id","className","src","warzone","alt","width","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0PAMaA,GAHcC,OAAOC,WACND,OAAOE,YAEnC,kDACI,WAAYC,GAAQ,IAAD,6BACf,cAAMA,GACNC,QAAQC,IAAIF,GACZ,EAAKG,MAAQ,CAAEC,eAAe,GAC9B,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBALT,EADvB,+DASQE,KAAKC,SAAS,CAAEL,eAAe,MATvC,yCAYQI,KAAKC,SAAS,CAAEL,eAAe,MAZvC,+BAeQ,OACI,cAAC,SAAD,CACIM,EAAG,IAAKC,EAAG,GAAIC,OAAQ,GACvBC,KAAK,SAASC,OAAO,QACrBC,YAAaP,KAAKL,MAAMC,cAAgB,EAAI,EAC5CY,aAAcR,KAAKH,iBACnBY,aAAcT,KAAKD,uBArBnC,GAA8BW,IAAMC,Y,iBCNrB,G,OAAA,IAA0B,6CCYnCC,G,OAAMC,IAAMC,OAAO,CACvBC,QAH4BC,sEAMxBC,EAAc5B,OAAOC,WACrB4B,EAAe7B,OAAOE,YA4Lb4B,MAzLf,WAAgB,IAAD,EAC2BC,mBAAS,IADpC,mBACQC,GADR,WAyIb,OATAC,qBAAU,WACRV,EAAIW,MACDC,MAAK,SAAAC,GACJ,IAAMC,EAAeD,EAAIE,KAEzBN,EAAeK,QAEnB,CAACL,IAGD,uBAAMO,GAAG,YAAYC,UAAU,WAA/B,UACI,qBAAMC,IAAKC,EAASF,UAAU,cAAcG,IAAI,SAChD,cAAC,QAAD,CAAOC,MAAOhB,EAAaiB,OAAQhB,EAAnC,SACE,cAAC,QAAD,UAQI,cAAC,EAAD,YC7JCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.41ff824f.chunk.js","sourcesContent":["import React from 'react';\nimport { Circle } from 'react-konva';\n\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport class Contract extends React.Component {\n    constructor(props) {\n        super(props);\n        console.log(props)\n        this.state = { isMouseInside: false };\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    }\n    handleMouseEnter() {\n        this.setState({ isMouseInside: true});\n    }\n    handleMouseLeave() {\n        this.setState({ isMouseInside: false});\n    }\n    render() {\n        return (\n            <Circle\n                x={100} y={60} radius={50}\n                fill=\"yellow\" stroke=\"black\"\n                strokeWidth={this.state.isMouseInside ? 5 : 1}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseLeave={this.handleMouseLeave}\n            />\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useEffect, useState } from 'react';\nimport {Layer, Stage} from 'react-konva';\nimport { Contract } from './useContract';\n// import { useCanvas } from './useCanvas';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nconst { REACT_APP_API_URL } = process.env;\n\nconst api = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\nconst canvasWidth = window.innerWidth;\nconst canvasHeight = window.innerHeight;\n\n\nfunction App() {\n  const [ coordinates, setCoordinates ] = useState([]);\n  // const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart, clickedContract ] = useCanvas();\n  // const [ currentCoord, setCurrentCoord ] = useState({})\n  // const [ contractCoord, setContractCoord ] = useState({})\n  // const [ reconCoord, setReconCord ] = useState(false)\n\n  // window.addEventListener('contextmenu', function (e) { \n  //   e.preventDefault(); \n  // }, false);\n  \n  // const removeAllCorrdinates = async () => {\n  //   let iterations = coordinates.length;\n\n  //   for (const coordinate of coordinates) {\n  //     if(coordinate.id){\n  //       await api.delete(`${coordinate.id}`);\n  //     }\n\n  //     if (!--iterations)\n  //       setCoordinates([]);\n  //   }\n  // }\n\n\n  // const handleCanvasClick=(event)=>{\n  //   setStart(false)\n\n  //   let _currentCoord  = {\n  //     id: null,\n  //     parentId: null,\n  //     x: 100 / (canvasWidth / event.clientX), \n  //     y: 100 / (canvasHeight / event.clientY),\n  //     type: null\n  //   };\n  //   console.log(clickedContract)\n  //   console.log(_currentCoord)\n  //   console.log(contractCoord)\n\n  //   if(_.isEmpty(clickedContract)){\n  //     console.log('test')\n\n  //     // _currentCoord.parentId = ( clickedContract.type === 'contract')? clickedContract.id: null;\n  //     setCurrentCoord(_currentCoord);\n  //     setCoordinates([...coordinates, _currentCoord]);\n  //   } \n  //   // else if( clickedContract.type === 'contract' ){\n  //   //   _currentCoord.parentId = clickedContract.id\n  //   //   setCurrentCoord(clickedContract);\n  //   //   setCoordinates([...coordinates]);\n  //   // }\n  //   else{\n  //     console.log('yay')\n  //     setCurrentCoord(clickedContract);\n  //     setContractCoord(clickedContract)\n  //     setCoordinates([...coordinates, _currentCoord]);\n  //   }\n\n\n  //   // Object.assign(_currentCoord,\n  //   //   (reconCoord) ? { type: 'recon'} : null);\n\n  //   //   // api.post(\"\",{ ..._currentCoord })\n  //   //   // .then(res => {\n  //   //   //   setContractCoord(res.data)\n  //   //   //   setCoordinates([...coordinates, res.data]);\n  //   //   // })\n\n  //   // if(reconCoord) setReconCord(false);\n\n  //   // setCurrentCoord(_currentCoord);\n  //   // setCoordinates([...coordinates, _currentCoord]);\n  //   // console.log(_currentCoord)\n\n  // };\n  // const handleClearCanvas=(event)=>{\n  //   removeAllCorrdinates();\n  // };\n\n  // const doAddContract = (event) =>{\n  //   // currentCoord.type = 'contract' ;\n  //   // console.log(currentCoord)\n  //   // add the newest mouse location to an array in state \n  //   // api.post(\"\",{ ...currentCoord })\n  //   // .then(res => {\n  //   //   setContractCoord(res.data)\n  //   //   setCoordinates([...coordinates, res.data]);\n  //   // })\n\n  // }\n  // const doAddRecon = () =>{\n  //   setReconCord(true)\n  //   // const { x, y } = currentCoord;\n  //   // const _currentCoord = { parentId: clickedContract.id,  x, y, type: 'recon' };\n\n  //   // const canvasObj = canvasRef.current;\n  //   // const ctx = canvasObj.getContext('2d');\n\n  //   // ctx.canvas.addEventListener('mousemove', e => {\n  //   //   ctx.save();\n  //   //   ctx.clearRect(0, 0, canvasWidth, canvasHeight)\n\n  //   //   // Get the local x/y coordinates of the mouse on the canvas\n  //   //   let x = e.clientX;\n  //   //   let y = e.clientY;\n  //   //   // Draw a dot where the mouse is\n  //   //   ctx.beginPath();\n  //   //   ctx.arc(x, y, 10, 0, 2 * Math.PI, false);\n  //   //   ctx.fillStyle = 'white';\n  //   //   ctx.fill();\n  //   //   ctx.save();\n  //   //   ctx.restore();\n  //   // })\n    \n  //   // console.log(_currentCoord)\n  //   // setCoordinates([...coordinates, _currentCoord]);\n  // }\n  // const doRemove = () =>{\n  //   const _coordinates = coordinates.filter((obj) => {\n  //     return obj.x !== currentCoord.x && obj.y !== currentCoord.y\n  //   })\n  //   if(currentCoord.type === 'recon'){\n  //     setReconCord(false);\n  //   }\n\n  //   setCoordinates([..._coordinates]);\n  // }\n\n  useEffect(() =>{\n    api.get()\n      .then(res => {\n        const _coordinates = res.data;\n        // setStart(true)\n        setCoordinates(_coordinates);\n      })\n  },[setCoordinates,])\n \n  return (\n    <main id=\"container\" className=\"App-main\" >\n        <img  src={warzone} className=\"img-warzone\" alt=\"logo\" />\n        <Stage width={canvasWidth} height={canvasHeight}>\n          <Layer>\n          {/* {\n            coordinates.length && \n            coordinates.map((coordinate,index)=>{\n                return <Contract coordinate={coordinate}/>\n            })\n          } */}\n\n              <Contract/>\n          </Layer>\n        </Stage>\n\n  \n      {/* <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\" >\n          { \n            !reconCoord && \n            <div className=\"contextMenu--contract\" onClick={doAddContract} >Start Contract</div>\n          }\n          { \n            (clickedContract.type === 'contract') && \n            <div className=\"contextMenu--recon\" onClick={doAddRecon} >Add Recon</div>\n          }\n          {\n            reconCoord && \n            <div className=\"contextMenu--remove\" onClick={doRemove} >Remove</div>\n          }\n      </div>\n\n      \n      <div className=\"clearButton\" style={{zIndex:1000}}>\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div> */}\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}