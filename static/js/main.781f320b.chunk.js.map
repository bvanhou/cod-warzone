{"version":3,"sources":["useCanvas.js","recon.svg","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","useState","contextMenuPosition","coordinates","setCoordinates","menu","document","getElementById","useEffect","ctx","current","getContext","clearRect","forEach","coordinate","location","console","log","fillStyle","shadowColor","shadowBlur","save","scale","translate","x","y","rotate","Math","PI","fill","restore","draw","r","position","show","m","contextMenu","empty","css","left","top","i","length","createElement","text","appendTo","hide","showContextMenu","App","setContextMenuPosition","handleCanvasClick","event","type","currentCoord","clientX","clientY","id","className","src","warzone","alt","ref","width","height","onClick","onContextMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mOAIMA,GCJS,IDIE,IAAIC,OADJ,qEASXC,EAAQ,GAEDC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YAwB5B,SAASC,IACZ,IAAMC,EAAYC,iBAAO,MADF,EAE+BC,mBAAS,IAFxC,mBAEhBC,EAFgB,aAIeD,mBAAS,KAJxB,mBAIhBE,EAJgB,KAIHC,EAJG,KAKjBC,EAAOC,SAASC,eAAe,eAgDrC,OAjCAC,qBAAU,WACN,IACMC,EADYV,EAAUW,QACNC,WAAW,MAEjCF,EAAIG,UAAW,EAAE,EAAGnB,EAAaG,GAcjCO,EAAYU,SAAQ,SAACC,IA5DtB,SAAcL,EAAKM,GACxBC,QAAQC,IAAI,sBACZR,EAAIS,UAAY,MAChBT,EAAIU,YAAc,OAClBV,EAAIW,WAAa,GACjBX,EAAIY,OACJZ,EAAIa,MAAM9B,EAAOA,GACjBiB,EAAIc,UAAUR,EAASS,EAAIhC,EAXd,EAW8BuB,EAASU,EAAIjC,EAX3C,GAYbiB,EAAIiB,OAAO,IAAMC,KAAKC,GAAK,KAC3BnB,EAAIoB,KAAKvC,GASTmB,EAAIqB,UA0CqCC,CAAKtB,EAAKK,MAhCzB,SAACkB,EAAEC,GAEvB,GADAjB,QAAQC,MACJe,EAAJ,CACA3B,EAAK6B,OACL,IAAIC,EAAEH,EAAEI,YACR/B,EAAKgC,QACLhC,EAAKiC,IAAI,CAACC,KAAKN,EAAST,EAAEgB,IAAIP,EAASR,IACvC,IAAI,IAAIgB,EAAE,EAAEA,EAAEN,EAAEO,OAAOD,IACnBnC,SAASqC,cAAc,OAAQ,CAAEC,KAAK,OAAQ,UAAUH,IAAMI,SAASxC,EAAK,SANzEA,EAAKyC,OAgCZC,CAAgBtC,EAAIP,MAajB,CAACC,EAAaC,EAAgBL,EAAWN,EAAaG,GE5FlD,UAA0B,4C,MCqD1BoD,MAhDf,WAAgB,IAAD,EACiC/C,oBAAS,GAD1C,gCAEyFH,KAFzF,mBAELmD,EAFK,KAEmB9C,EAFnB,KAEgCC,EAFhC,KAEgDL,EAFhD,KAE2DN,EAF3D,KAEwEG,EAFxE,KAIPsD,EAAkB,SAACC,GACvBnC,QAAQC,IAAIkC,GACO,UAAfA,EAAMC,KACRpC,QAAQC,IAAI,cACY,gBAAfkC,EAAMC,MACfpC,QAAQC,IAAI,eAKd,IAAMoC,EAAe,CAAE7B,EAAG2B,EAAMG,QAAS7B,EAAG0B,EAAMI,SAEhDN,EAAuBI,GACvBjD,EAAe,GAAD,mBAAKD,GAAL,CAAkBkD,MAOpC,OACE,uBAAMG,GAAG,YAAYC,UAAU,WAA/B,UACE,qBAAKC,IAAKC,EAASF,UAAU,cAAcG,IAAI,SAE/C,wBACEH,UAAU,aACVI,IAAK9D,EACL+D,MAAOrE,EACPsE,OAAQnE,EACRoE,QAASd,EACTe,cAAef,IAEf,oBAAIM,GAAG,cAAP,SAAqB,4CC7BdU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvE,SAASC,eAAe,SAM1B2D,M","file":"static/js/main.781f320b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport recon from './recon.svg'\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// var p1 = new Path2D(\"M495 9165 c-22 -13 -51 -41 -65 -61 l-25 -38 -3 -2839 c-2 -2815 -2 -2841 18 -2881 13 -28 479 -500 1477 -1497 1411 -1410 1460 -1458 1518 -1479 82 -31 189 -31 269 0 56 21 125 89 1525 1490 1241 1242 1469 1474 1479 1508 9 30 12 705 12 2854 l0 2814 -22 44 c-13 24 -40 58 -61 74 l-39 31 -3021 2 -3022 3 -40 -25z m5806 -365 c19 -11 19 -51 19 -2646 l0 -2635 -53 -56 c-146 -156 -2711 -2713 -2721 -2713 -6 0 -631 620 -1389 1378 l-1377 1377 0 2647 c0 2108 3 2647 13 2651 26 11 5488 7 5508 -3z\");\n// var p2 = new Path2D(\"M3160 7395 c-79 -13 -158 -34 -175 -45 -5 -4 -28 -13 -50 -20 -77 -24 -188 -93 -233 -144 l-32 -37 0 -789 c0 -458 4 -799 9 -813 15 -38 39 -41 84 -10 113 80 186 116 327 161 116 38 324 39 455 2 134 -37 155 -44 405 -142 72 -29 212 -71 313 -96 60 -15 361 -16 481 -1 123 15 316 57 344 75 l22 14 0 823 c0 627 -3 826 -12 835 -14 14 -60 16 -74 3 -13 -13 -223 -94 -309 -118 -144 -42 -190 -48 -340 -48 -149 0 -151 0 -220 33 -38 18 -140 80 -225 136 -167 112 -263 159 -368 181 -82 18 -299 18 -402 0z\");\n// var p3 = new Path2D(\"M2122 7373 c-4 -10 -7 -789 -7 -1731 0 -1512 2 -1714 15 -1722 23 -15 333 -13 353 3 16 11 17 124 15 1737 l-3 1725 -183 3 c-167 2 -183 1 -190 -15z\");\n\n\n// Scaling Constants for Canvas\nconst SCALE = 0.1;\nconst OFFSET = 0;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport function draw(ctx, location){\n  console.log(\"attempting to draw\")\n  ctx.fillStyle = 'red';\n  ctx.shadowColor = 'blue';\n  ctx.shadowBlur = 15;\n  ctx.save();\n  ctx.scale(SCALE, SCALE);\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n  ctx.rotate(225 * Math.PI / 180);\n  ctx.fill(SVG_PATH);\n//   ctx.fill(p2);\n//   ctx.fill(p3);\n\n//   <div className=\"custom-context\" id=\"customcontext\" ref={ctx}>\n//     Heart\n//     </div>\n  \n  // .restore(): Canvas 2D API restores the most recently saved canvas state\n  ctx.restore();  \n};\n\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const [contextMenuPosition, setContextMenuPosition] = useState({});\n\n    const [coordinates, setCoordinates] = useState([]);\n    const menu = document.getElementById('contextMenu');\n    const showContextMenu = (r,position) => {\n        console.log()\n        if(!r){menu.hide(); return;}\n        menu.show();\n        var m=r.contextMenu;\n        menu.empty();\n        menu.css({left:position.x,top:position.y});\n        for(var i=0;i<m.length;i++){\n            document.createElement('<li>', { text:'test', 'data-fn':i, }).appendTo(menu[0]);\n        }\n      }\n      \n\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        \n        // <div ref={ctx} className=\"contextMenu\">\n        //     <div className=\"contextMenu--option\">Share this</div>\n        //     <div className=\"contextMenu--option\">New window</div>\n        //     <div className=\"contextMenu--option\">Visit official site</div>\n        //     <div className=\"contextMenu--option contextMenu--option__disabled\">View full version</div>\n        //     <div className=\"contextMenu--option\">Settings</div>\n        //     <div className=\"contextMenu--separator\" />\n        //     <div className=\"contextMenu--option\">About this app</div>\n        // </div>\n\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{draw(ctx, coordinate)});\n\n        showContextMenu(ctx,contextMenuPosition);\n\n        // Add Right Click\n        // document.addEventListener('contextmenu', _handleContextMenu);\n        // document.addEventListener('click', _handleClick);\n        // document.addEventListener('scroll', _handleScroll);\n\n        \n\n    });\n\n\n\n    return [coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\n}\n","export default __webpack_public_path__ + \"static/media/recon.3577f9cb.svg\";","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nfunction App() {\n  const [showContextMenu, setShowContextMenu] = useState(false);\n  const [ setContextMenuPosition, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ] = useCanvas();\n\n  const handleCanvasClick=(event)=>{\n    console.log(event)\n    if (event.type === 'click') {\n      console.log('Left click');\n    } else if (event.type === 'contextmenu') {\n      console.log('Right click');\n      // setShowContextMenu(true)\n    }\n\n    // on each click get current mouse location \n    const currentCoord = { x: event.clientX, y: event.clientY };\n      // add the newest mouse location to an array in state \n      setContextMenuPosition(currentCoord);\n      setCoordinates([...coordinates, currentCoord]);\n    };\n\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n\n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick}\n        onContextMenu={handleCanvasClick} />\n\n        <ul id=\"contextMenu\"><li>Test</li></ul>\n\n       \n{/* \n      <div className=\"button\" >\n        <button onClick={handleClearCanvas} > CLEAR </button>\n      </div> */}\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}