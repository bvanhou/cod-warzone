{"version":3,"sources":["useCanvas.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","menuRef","useState","coordinates","setCoordinates","useEffect","ctx","current","getContext","clearRect","forEach","coordinate","location","console","log","fillStyle","shadowColor","shadowBlur","save","scale","translate","x","y","rotate","Math","PI","fill","restore","draw","position","menu","$","css","left","top","drawMenu","pop","App","handleCanvasClick","event","type","currentCoord","clientX","clientY","id","className","src","warzone","alt","ref","width","height","onClick","onContextMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAKMA,EAAW,IAAIC,OADJ,oEAIXC,EAAQ,IAEDC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YAgB5B,SAASC,IACZ,IAAMC,EAAYC,iBAAO,MACnBC,EAAUD,iBAAO,MAFA,EAIeE,mBAAS,IAJxB,mBAIhBC,EAJgB,KAIHC,EAJG,KAsCvB,OAZAC,qBAAU,WACN,IACMC,EADYP,EAAUQ,QACNC,WAAW,MAEjCF,EAAIG,UAAW,EAAE,EAAGhB,EAAaG,GAGjCO,EAAYO,SAAQ,SAACC,IA/CtB,SAAcL,EAAKM,GACxBC,QAAQC,IAAI,sBACZR,EAAIS,UAAY,MAChBT,EAAIU,YAAc,OAClBV,EAAIW,WAAa,GACjBX,EAAIY,OACJZ,EAAIa,MAAM3B,EAAOA,GACjBc,EAAIc,UAAUR,EAASS,EAAI7B,EAXd,GAW8BoB,EAASU,EAAI9B,EAX3C,IAYbc,EAAIiB,OAAO,IAAMC,KAAKC,GAAK,KAC3BnB,EAAIoB,KAAKpC,GAETgB,EAAIqB,UAoCqCC,CAAKtB,EAAKK,MA3BhC,SAACkB,GACdhB,QAAQC,IAAIe,GACZ,IAAMC,EAAO7B,EAAQM,QACrBM,QAAQC,IAAIiB,IAAED,IAGdA,EAAKE,IAAI,CAACC,KAAK,GAAD,OAAIJ,EAASR,EAAb,MAAmBa,IAAI,GAAD,OAAIL,EAASP,EAAb,QAsBpCa,CAAShC,EAAYiC,UAIlB,CAAEnC,EAASE,EAAaC,EAAgBL,EAAWN,EAAaG,GCjE5D,UAA0B,4C,MC2D1ByC,MAtDf,WAAgB,IAAD,EACiCnC,oBAAS,GAD1C,gCAE0EJ,KAF1E,mBAELG,EAFK,KAEIE,EAFJ,KAEiBC,EAFjB,KAEiCL,EAFjC,KAE4CN,EAF5C,KAEyDG,EAFzD,KAIP0C,EAAkB,SAACC,GACvB1B,QAAQC,IAAIyB,GACO,UAAfA,EAAMC,KACR3B,QAAQC,IAAI,cACY,gBAAfyB,EAAMC,MACf3B,QAAQC,IAAI,eAKd,IAAM2B,EAAe,CAAEpB,EAAGkB,EAAMG,QAASpB,EAAGiB,EAAMI,SAEhDvC,EAAe,GAAD,mBAAKD,GAAL,CAAkBsC,MAOpC,OACE,uBAAMG,GAAG,YAAYC,UAAU,WAA/B,UACE,qBAAKC,IAAKC,EAASF,UAAU,cAAcG,IAAI,SAE/C,wBACEH,UAAU,aACVI,IAAKlD,EACLmD,MAAOzD,EACP0D,OAAQvD,EACRwD,QAASd,EACTe,cAAef,IAEjB,sBAAKW,IAAKhD,EAAS2C,GAAG,cAAtB,UACI,qBAAKC,UAAU,sBAAf,wBACA,qBAAKA,UAAU,sBAAf,wBACA,qBAAKA,UAAU,sBAAf,iCACA,qBAAKA,UAAU,oDAAf,+BACA,qBAAKA,UAAU,sBAAf,sBACA,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,sBAAf,mCCnCKS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6b474a6.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport $ from 'jquery'; \n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport function draw(ctx, location){\n  console.log(\"attempting to draw\")\n  ctx.fillStyle = 'red';\n  ctx.shadowColor = 'blue';\n  ctx.shadowBlur = 15;\n  ctx.save();\n  ctx.scale(SCALE, SCALE);\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n  ctx.rotate(225 * Math.PI / 180);\n  ctx.fill(SVG_PATH);\n  // .restore(): Canvas 2D API restores the most recently saved canvas state\n  ctx.restore();  \n};\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n\n    const drawMenu = (position) =>{\n        console.log(position)\n        const menu = menuRef.current;\n        console.log($(menu))\n        // $(menu).css({left:'0px',top:'50px'});\n\n        menu.css({left:`${position.x}px`,top:`${position.y}px`});\n    \n        // _context.g\n        // if(!r){menu.hide(); return;}\n        //     menu.show();\n        //     var m=r.contextMenu;\n        //     menu.empty();\n        //     menu.css({left:x,top:y});\n        //     for(var i=0;i<m.length;i++){\n        //         $('<li>', { text:m[i], 'data-fn':i, }).appendTo(menu[0]);\n        //     }\n        // menuRef.restore()0; \n    }\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{draw(ctx, coordinate)});\n        drawMenu(coordinates.pop());\n\n    });\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\n}\n","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nfunction App() {\n  const [showContextMenu, setShowContextMenu] = useState(false);\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ] = useCanvas();\n\n  const handleCanvasClick=(event)=>{\n    console.log(event)\n    if (event.type === 'click') {\n      console.log('Left click');\n    } else if (event.type === 'contextmenu') {\n      console.log('Right click');\n      // setShowContextMenu(true)\n    }\n\n    // on each click get current mouse location \n    const currentCoord = { x: event.clientX, y: event.clientY };\n      // add the newest mouse location to an array in state \n      setCoordinates([...coordinates, currentCoord]);\n    };\n\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n\n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick}\n        onContextMenu={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\">\n          <div className=\"contextMenu--option\">Share this</div>\n          <div className=\"contextMenu--option\">New window</div>\n          <div className=\"contextMenu--option\">Visit official site</div>\n          <div className=\"contextMenu--option contextMenu--option__disabled\">View full version</div>\n          <div className=\"contextMenu--option\">Settings</div>\n          <div className=\"contextMenu--separator\" />\n          <div className=\"contextMenu--option\">About this app</div>\n      </div>\n       \n      {/* \n      <div className=\"button\" >\n        <button onClick={handleClearCanvas} > CLEAR </button>\n      </div> */}\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}