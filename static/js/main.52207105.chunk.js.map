{"version":3,"sources":["useCanvas.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","useState","coordinates","setCoordinates","useEffect","ctx","current","getContext","scale","lineCap","strokeStyle","lineWidth","clearRect","forEach","coordinate","location","console","log","fillStyle","shadowColor","shadowBlur","save","translate","x","y","rotate","Math","PI","fill","restore","draw","App","className","ref","width","height","onClick","event","currentCoord","clientX","clientY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAIMA,GCJS,IDIE,IAAIC,OADJ,qEAMJC,EAAkC,EAApBC,OAAOC,WACrBC,EAAoC,EAArBF,OAAOG,YAgC5B,SAASC,IACZ,IAAMC,EAAYC,iBAAO,MADF,EAEeC,mBAAS,IAFxB,mBAEhBC,EAFgB,KAEHC,EAFG,KAkBvB,OAdAC,qBAAU,WACN,IACMC,EADYN,EAAUO,QACNC,WAAW,MACjCF,EAAIG,MAAM,EAAE,GACZH,EAAII,QAAU,QACdJ,EAAIK,YAAc,QAClBL,EAAIM,UAAY,EAEhBN,EAAIO,UAAW,EAAE,EAAGnB,EAAaG,GAGjCM,EAAYW,SAAQ,SAACC,IA7BtB,SAAcT,EAAKU,GACxBC,QAAQC,IAAI,sBACZZ,EAAIa,UAAY,MAChBb,EAAIc,YAAc,OAClBd,EAAIe,WAAa,GACjBf,EAAIgB,OACJhB,EAAIG,MA3BQ,KA4BZH,EAAIiB,UAAUP,EAASQ,EA5BX,EACC,GA2B8BR,EAASS,EA5BxC,EACC,IA4BbnB,EAAIoB,OAAO,IAAMC,KAAKC,GAAK,KAC3BtB,EAAIuB,KAAKrC,GAETc,EAAIwB,UAkBqCC,CAAKzB,EAAKS,SAG1C,CAAEZ,EAAaC,EAAgBJ,EAAWN,EAAaG,G,MExBnDmC,MAhCf,WAAgB,IAAD,EAEiEjC,IAFjE,mBAELI,EAFK,KAEQC,EAFR,KAEwBJ,EAFxB,KAEmCN,EAFnC,KAEgDG,EAFhD,KAeb,OACE,uBAAMoC,UAAU,WAAhB,UACE,wBACEA,UAAU,aACVC,IAAKlC,EACLmC,MAAOzC,EACP0C,OAAQvC,EACRwC,QAlBkB,SAACC,GAEvB,IAAMC,EAAe,CAAEf,EAAGc,EAAME,QAASf,EAAGa,EAAMG,SAElDrC,EAAe,GAAD,mBAAKD,GAAL,CAAkBoC,QAgB9B,qBAAKN,UAAU,SAAf,SACE,wBAAQI,QAdU,SAACC,GACvBlC,EAAe,KAaX,2BCjBOsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.52207105.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 2;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth * 2;\nexport const canvasHeight = window.innerHeight * 2;\n\n// const canvas = canvasRef.current;\n// canvas.width = window.innerWidth * 2;\n// canvas.height = window.innerHeight * 2;\n// canvas.style.width = `${window.innerWidth}px`;\n// canvas.style.height = `${window.innerHeight}px`;\n\n// const context = canvas.getContext(\"2d\")\n// context.scale(2,2)\n// context.lineCap = \"round\"\n// context.strokeStyle = \"black\"\n// context.lineWidth = 5\n// contextRef.current = context;\n\n\n\n\nexport function draw(ctx, location){\n  console.log(\"attempting to draw\")\n  ctx.fillStyle = 'red';\n  ctx.shadowColor = 'blue';\n  ctx.shadowBlur = 15;\n  ctx.save();\n  ctx.scale(SCALE, SCALE);\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n  ctx.rotate(225 * Math.PI / 180);\n  ctx.fill(SVG_PATH);\n  // .restore(): Canvas 2D API restores the most recently saved canvas state\n  ctx.restore();  \n};\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const [coordinates, setCoordinates] = useState([]);\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        ctx.scale(2,2)\n        ctx.lineCap = \"round\"\n        ctx.strokeStyle = \"black\"\n        ctx.lineWidth = 5\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{draw(ctx, coordinate)});\n    });\n\n    return [ coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\n}\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from './logo.svg';\nimport { useCanvas } from './useCanvas';\nimport './App.css';\n\nfunction App() {\n  \n  const [ coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ] = useCanvas();\n\n  const handleCanvasClick=(event)=>{\n    // on each click get current mouse location \n    const currentCoord = { x: event.clientX, y: event.clientY };\n    // add the newest mouse location to an array in state \n    setCoordinates([...coordinates, currentCoord]);\n  };\n\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n\n  return (\n    <main className=\"App-main\" >\n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick} />\n\n      <div className=\"button\" >\n        <button onClick={handleClearCanvas} > CLEAR </button>\n      </div>\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}