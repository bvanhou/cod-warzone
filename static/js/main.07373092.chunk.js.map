{"version":3,"sources":["map-overview-bg.jpg","useCanvas.js","useContextMenu.js","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","useState","coordinates","setCoordinates","useEffect","ctx","current","getContext","clearRect","forEach","coordinate","location","console","log","fillStyle","shadowColor","shadowBlur","save","scale","translate","x","y","rotate","Math","PI","fill","restore","draw","Component","itemCallback","item2Callback","appleCallback","orangeCallback","coolCallback","App","handleCanvasClick","event","type","currentCoord","clientX","clientY","id","className","src","warzone","alt","ref","width","height","onClick","onContextMenu","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,MAA0B,4CCInCA,EAAW,IAAIC,OADJ,oEAIXC,EAAQ,GAEDC,EAAcC,OAAOC,WACrBC,EAAeF,OAAOG,YAiB5B,SAASC,IACZ,IAAMC,EAAYC,iBAAO,MADF,EAEeC,mBAAS,IAFxB,mBAEhBC,EAFgB,KAEHC,EAFG,KA2CvB,OAlBAC,qBAAU,WACN,IACMC,EADYN,EAAUO,QACNC,WAAW,MAEjCF,EAAIG,UAAW,EAAE,EAAGf,EAAaG,GAGjCM,EAAYO,SAAQ,SAACC,IA/CtB,SAAcL,EAAKM,GACxBC,QAAQC,IAAI,sBACZR,EAAIS,UAAY,MAChBT,EAAIU,YAAc,OAClBV,EAAIW,WAAa,GACjBX,EAAIY,OACJZ,EAAIa,MAAM1B,EAAOA,GACjBa,EAAIc,UAAUR,EAASS,EAAI5B,EAXd,EAW8BmB,EAASU,EAAI7B,EAX3C,GAYba,EAAIiB,OAAO,IAAMC,KAAKC,GAAK,KAC3BnB,EAAIoB,KAAKnC,GAETe,EAAIqB,UAoCqCC,CAAKtB,EAAKK,SAW1C,CAAER,EAAaC,EAAgBJ,EAAWN,EAAaG,G,yCCpExCgC,Y,YCMQ,GAAKC,mBACA,GAAKC,oBACX,GAAKC,oBACI,GAAKC,qBAEf,GAAKC,aA4DtBC,MAzDf,WAAgB,IAAD,EACiEpC,IADjE,mBACLI,EADK,KACQC,EADR,KACwBJ,EADxB,KACmCN,EADnC,KACgDG,EADhD,KAGPuC,EAAkB,SAACC,GACvBxB,QAAQC,IAAIuB,GACO,UAAfA,EAAMC,KACRzB,QAAQC,IAAI,cACY,gBAAfuB,EAAMC,MACfzB,QAAQC,IAAI,eAId,IAAMyB,EAAe,CAAElB,EAAGgB,EAAMG,QAASlB,EAAGe,EAAMI,SAElDrC,EAAe,GAAD,mBAAKD,GAAL,CAAkBoC,MASlC,OACE,uBAAMG,GAAG,YAAYC,UAAU,WAA/B,UACE,qBAAKC,IAAKC,EAASF,UAAU,cAAcG,IAAI,SAE/C,wBACEH,UAAU,aACVI,IAAK/C,EACLgD,MAAOtD,EACPuD,OAAQpD,EACRqD,QAASd,EACTe,cAAef,IAKnB,sBAAKO,UAAU,cAAf,UACE,qBAAKA,UAAU,sBAAf,wBACA,qBAAKA,UAAU,sBAAf,wBACA,qBAAKA,UAAU,sBAAf,iCACA,qBAAKA,UAAU,oDAAf,+BACA,qBAAKA,UAAU,sBAAf,sBACA,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,sBAAf,mCCjDSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.07373092.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import React, { useState, useEffect, useRef } from 'react';\n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.1;\nconst OFFSET = 0;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport function draw(ctx, location){\n  console.log(\"attempting to draw\")\n  ctx.fillStyle = 'red';\n  ctx.shadowColor = 'blue';\n  ctx.shadowBlur = 15;\n  ctx.save();\n  ctx.scale(SCALE, SCALE);\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n  ctx.rotate(225 * Math.PI / 180);\n  ctx.fill(SVG_PATH);\n  // .restore(): Canvas 2D API restores the most recently saved canvas state\n  ctx.restore();  \n};\n\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const [coordinates, setCoordinates] = useState([]);\n\n    // componentDidMount() {\n    //     document.addEventListener('contextmenu', this._handleContextMenu);\n    //     document.addEventListener('click', this._handleClick);\n    //     document.addEventListener('scroll', this._handleScroll);\n    // };\n\n    // componentWillUnmount() {\n    //   document.removeEventListener('contextmenu', this._handleContextMenu);\n    //   document.removeEventListener('click', this._handleClick);\n    //   document.removeEventListener('scroll', this._handleScroll);\n    // }\n\n    // useEffect( () => console.log(\"mount\"), [] );\n    // useEffect( () => console.log(\"will update data1\"), [ data1 ] );\n    // useEffect( () => console.log(\"will update any\") );\n    // useEffect( () => () => console.log(\"will update data1 or unmount\"), [ data1 ] );\n    // useEffect( () => () => console.log(\"unmount\"), [] );\n\n\n\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{draw(ctx, coordinate)});\n\n        // Add Right Click\n        // document.addEventListener('contextmenu', _handleContextMenu);\n        // document.addEventListener('click', _handleClick);\n        // document.addEventListener('scroll', _handleScroll);\n\n        \n\n    });\n\n    return [ coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\n}\n","import React, {Component} from 'react'; \n\nclass contextMenu extends Component{\n  constructor(props) {\n    super(props);\n    this.contextRef = React.createRef();\n    this.returnMenu = this.returnMenu.bind(this);\n    \n    this.state={\n      visible: false,\n      x: 0,\n      y: 0\n    };\n    \n  }\n  \n  componentDidMount(){\n    var self=this;\n    document.addEventListener('contextmenu', function(event){\n      event.preventDefault();\n        const clickX = event.clientX;\n        const clickY = event.clientY;\n        self.setState({ visible: true, x: clickX, y: clickY });\n      \n    });\n    document.addEventListener('click', function(event){\n      \n      if(self.contextRef.current.id=='customcontext'){\n      self.click(event.target.getAttribute('index'));\n      }\n      event.preventDefault();\n      self.setState({ visible: false, x:0, y:0});\n      \n    });\n  }\n  \n   \n  click(index) {\n    if(this.props.items[index].callback)\n      this.props.items[index].callback();\n  else{\n    console.log(\"callback not registered for the menu item\")\n  }\n  }\n  \n  returnMenu(items){\n    var myStyle = {\n      'position': 'absolute',\n      'top': `${this.state.y}px`,\n      'left':`${this.state.x+5}px`\n    }\n  \n    var self=this;\n    return <div className='custom-context' id='customcontext' style={myStyle} ref={this.contextRef}>\n        {items.map((item, index, arr) =>{\n          \n          if(arr.length-1==index){\n            return <div key={index} className='custom-context-item-last' index={index}>{item.label}</div>\n          }else{\n            return <div key={index} className='custom-context-item' index={index}>{item.label}</div>\n          }\n        })}\n        </div>;\n  }\n  \n  render() {\n    return  (<div id='cmenu'>\n        {this.state.visible ? this.returnMenu(this.props.items): null}\n    </div>\n    )\n  }\n}\n\nexport default contextMenu;","import warzone from './map-overview-bg.jpg';\n\nimport { useCanvas } from './useCanvas';\nimport contextMenu from './useContextMenu'; \n\nimport './App.css';\n\nconst menu = [\n  {\"label\": \"Item 1\", \"callback\": this.itemCallback},\n  {\"label\": \"Menu item 2\", \"callback\": this.item2Callback},\n  {\"label\": \"Apple\", \"callback\": this.appleCallback},\n  {\"label\": \"This is orange\", \"callback\": this.orangeCallback},\n  {\"label\": \"Conetxt menu is fun\", },\n  {\"label\": \"Cool\", \"callback\": this.coolCallback}\n];\n\nfunction App() {\n  const [ coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ] = useCanvas();\n\n  const handleCanvasClick=(event)=>{\n    console.log(event)\n    if (event.type === 'click') {\n      console.log('Left click');\n    } else if (event.type === 'contextmenu') {\n      console.log('Right click');\n    }\n\n    // on each click get current mouse location \n    const currentCoord = { x: event.clientX, y: event.clientY };\n    // add the newest mouse location to an array in state \n    setCoordinates([...coordinates, currentCoord]);\n\n\n  };\n\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n\n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img src={warzone} className=\"img-warzone\" alt=\"logo\" />\n\n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick}\n        onContextMenu={handleCanvasClick} />\n\n    {/* <contextMenu items={menu}>\n    </contextMenu> */}\n\n    <div className=\"contextMenu\">\n      <div className=\"contextMenu--option\">Share this</div>\n      <div className=\"contextMenu--option\">New window</div>\n      <div className=\"contextMenu--option\">Visit official site</div>\n      <div className=\"contextMenu--option contextMenu--option__disabled\">View full version</div>\n      <div className=\"contextMenu--option\">Settings</div>\n      <div className=\"contextMenu--separator\" />\n      <div className=\"contextMenu--option\">About this app</div>\n    </div>\n        \n{/* \n      <div className=\"button\" >\n        <button onClick={handleClearCanvas} > CLEAR </button>\n      </div> */}\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}