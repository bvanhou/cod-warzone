{"version":3,"sources":["useCanvas.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","menuRef","useState","coordinates","setCoordinates","start","setStart","useEffect","ctx","current","getContext","menu","_corrdinate","length","undefined","type","location","locationX","x","locationY","y","style","left","top","drawMenu","clearRect","forEach","coordinate","console","log","fillStyle","shadowColor","shadowBlur","save","scale","translate","rotate","Math","PI","fill","restore","draw","api","axios","create","baseURL","process","App","currentCoord","setCurrentCoord","contractCoord","setContractCoord","addEventListener","e","preventDefault","get","then","res","_coordinates","data","id","className","src","warzone","alt","ref","width","height","onContextMenu","event","_currentCoord","clientX","clientY","reduce","a","b","abs","onClick","parentId","post","filter","obj","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a92cefe.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport function draw(ctx, location){\n    console.log(location)\n    if(location.type){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        ctx.fillStyle = location.type === 'contract' ? 'red': 'blue';\n        ctx.shadowColor = 'blue';\n        ctx.shadowBlur = 15;\n        ctx.save();\n        ctx.scale(SCALE, SCALE);\n        ctx.translate(locationX / SCALE - OFFSET, locationY / SCALE - OFFSET);\n        ctx.rotate(225 * Math.PI / 180);\n        ctx.fill(SVG_PATH);\n        // .restore(): Canvas 2D API restores the most recently saved canvas state\n        ctx.restore();  \n    }\n};\n\nexport const drawMenu = (menu, location) =>{\n    if(location){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        menu.style.left = `${locationX}px`;\n        menu.style.top = `${locationY}px`;\n    }\n}\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n    const [start, setStart] = useState(false);\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        const menu = menuRef.current;\n        const _corrdinate = coordinates.length-1;\n        // Draw Context Menu \n        if(!start && _corrdinate.type === undefined)    \n            drawMenu(menu, coordinates[coordinates.length-1]);\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{\n            draw(ctx, coordinate)\n        });\n\n\n    });\n\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart ];\n}\n","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useEffect, useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport axios from 'axios';\n\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nconst { REACT_APP_API_URL } = process.env;\n\nconst api = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\n\nfunction App() {\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart ] = useCanvas();\n  const [ currentCoord, setCurrentCoord ] = useState({})\n  const [ contractCoord, setContractCoord ] = useState({})\n\n  window.addEventListener('contextmenu', function (e) { \n    e.preventDefault(); \n  }, false);\n  \n  const handleCanvasClick=(event)=>{\n    setStart(false)\n    let screenPercentX = 100 / (canvasWidth / event.clientX);\n    let screenPercentY = 100 / (canvasHeight / event.clientY);\n    let _currentCoord  = { x: screenPercentX, y: screenPercentY };\n\n    _currentCoord = coordinates.reduce((a, b) => {\n        if(\n          Math.abs(b.x - _currentCoord.x) < Math.abs(a.x - _currentCoord.x) \n          &&\n          Math.abs(b.y - _currentCoord.y) < Math.abs(a.y - _currentCoord.y) \n        ) \n        return b;\n        else \n        return a;\n    })\n    // on each click get current mouse location \n    setCurrentCoord(_currentCoord);\n    console.log(contractCoord)\n    // add the newest mouse location to an array in state \n    setCoordinates([...coordinates, _currentCoord]);\n  };\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n  const doAddContract = (event) =>{\n    let screenPercentX = 100 / (canvasWidth / event.clientX);\n    let screenPercentY = 100 / (canvasHeight / event.clientY);\n    let _currentCoord  = { parentId: null, x: screenPercentX, y: screenPercentY, type: 'contract' };\n    // add the newest mouse location to an array in state \n    api.post(\"\",{ ..._currentCoord })\n    .then(res => {\n      setContractCoord(res.data)\n      setCoordinates([...coordinates, _currentCoord]);\n    })\n\n  }\n  const doAddRecon = () =>{\n    const { x, y } = currentCoord;\n    const _currentCoord = { parentId: contractCoord.id,  x, y, type: 'recon' };\n    setCoordinates([...coordinates, _currentCoord]);\n  }\n  const doRemove = () =>{\n    const _coordinates = coordinates.filter((obj) => {\n      return obj.x !== currentCoord.x && obj.y !== currentCoord.y\n    })\n    setCoordinates([..._coordinates]);\n  }\n\n  useEffect(() =>{\n    api.get()\n      .then(res => {\n        const _coordinates = res.data;\n        setStart(true)\n        setCoordinates(_coordinates);\n      })\n  },[setCoordinates, setStart])\n \n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img  src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onContextMenu={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\" >\n          <div className=\"contextMenu--contract\" onClick={doAddContract} >Start Contract</div>\n          { \n            contractCoord.id && \n            <div className=\"contextMenu--recon\" onClick={doAddRecon} >Add Recon</div>\n          }\n          <div className=\"contextMenu--remove\" onClick={doRemove} >Remove</div>\n      </div>\n       \n      \n      <div className=\"clearButton\" >\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div>\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}