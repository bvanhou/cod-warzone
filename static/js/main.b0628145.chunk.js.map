{"version":3,"sources":["useContract.js","useCanvas.js","App.js","map-overview-bg.jpg","reportWebVitals.js","index.js"],"names":["window","innerWidth","innerHeight","Contract","props","state","isMouseInside","handleMouseEnter","bind","handleMouseLeave","this","setState","x","y","radius","fill","stroke","strokeWidth","onMouseEnter","onMouseLeave","React","Component","canvasWidth","Path2D","canvasHeight","rect","ctx","_ctx","id","width","height","strokewidth","redraw","prototype","draw","highlight","save","beginPath","fillStyle","strokeStyle","lineWidth","restore","isPointInside","api","axios","create","baseURL","process","App","canvasRef","useRef","menuRef","useState","coordinates","setCoordinates","clickedContract","setClickedContract","setStart","useEffect","current","getContext","length","rects","push","useCanvas","addEventListener","e","preventDefault","get","then","res","_coordinates","data","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0628145.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, Component } from 'react';\nimport { Circle } from 'react-konva';\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nfunction isIntersect(point, el) {\n    return Math.sqrt((point.x-el.x) ** .5 + (point.y - el.y) ** .5) < 10;\n}\n\nexport class Contract extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { isMouseInside: false};\n        this.handleMouseEnter = this.handleMouseEnter.bind(this);\n        this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    }\n    handleMouseEnter() {\n        this.setState({ isMouseInside: true});\n    }\n    handleMouseLeave() {\n        this.setState({ isMouseInside: false});\n    }\n    render() {\n        return (\n            <Circle\n                x={100} y={60} radius={50}\n                fill=\"yellow\" stroke=\"black\"\n                strokeWidth={this.state.isMouseInside ? 5 : 1}\n                onMouseEnter={this.handleMouseEnter}\n                onMouseLeave={this.handleMouseLeave}\n            />\n        );\n    }\n}","import { useState, useEffect, useRef } from 'react';\n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nfunction isIntersect(point, el) {\n    return Math.sqrt((point.x-el.x) ** .5 + (point.y - el.y) ** .5) < 10;\n}\n\nvar rect = (function () {\n    let ctx;\n    // constructor\n    function rect(_ctx, id, x, y, width, height, fill, stroke, strokewidth) {\n        ctx = _ctx\n        this.x = x;\n        this.y = y;\n        this.id = id;\n        this.width = width;\n        this.height = height;\n        this.fill = fill || \"gray\";\n        this.stroke = stroke || \"skyblue\";\n        this.strokewidth = strokewidth || 2;\n        this.redraw(this.x, this.y);\n        return (this);\n    }\n    rect.prototype.redraw = function (x, y) {\n        this.x = x || this.x;\n        this.y = y || this.y;\n        this.draw(this.stroke);\n        return (this);\n    }\n    //\n    rect.prototype.highlight = function (x, y) {\n        this.x = x || this.x;\n        this.y = y || this.y;\n        this.draw(\"orange\");\n        return (this);\n    }\n    //\n    rect.prototype.draw = function (stroke) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.fillStyle = this.fill;\n        ctx.strokeStyle = stroke;\n        ctx.lineWidth = this.strokewidth;\n        ctx.rect(this.x, this.y, this.width, this.height);\n        ctx.stroke();\n        ctx.fill();\n        ctx.restore();\n    }\n    //\n    rect.prototype.isPointInside = function (x, y) {\n        return (x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height);\n    }\n\n\n    return rect;\n})();\n\n\n\n\nexport function draw(ctx, location, coordinates, setClickedContract){\n    if(location.type){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        ctx.fillStyle = location.type === 'contract' ? 'red': 'blue';\n        ctx.shadowColor = 'blue';\n        ctx.shadowBlur = 15;\n        ctx.save();\n        ctx.scale(SCALE, SCALE);\n        ctx.translate(locationX / SCALE - OFFSET, locationY / SCALE - OFFSET);\n        ctx.rotate(225 * Math.PI / 180);\n        ctx.fill(SVG_PATH);\n\n        ctx.canvas.addEventListener('click',(event)=> {\n            let x = 100 / (canvasWidth / event.clientX);\n            let y = 100 / (canvasHeight / event.clientY);\n            let contract = coordinates.find((element) => {\n                return element.type && isIntersect({ x, y }, element)\n            });\n            if(contract) setClickedContract(contract)\n            else setClickedContract({})\n        });\n        ctx.restore();  \n    }\n};\n\nexport const drawMenu = (menu, location) =>{\n    if(location){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        menu.style.left = `${locationX}px`;\n        menu.style.top = `${locationY}px`;\n    }\n}\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n    const [clickedContract, setClickedContract] = useState({});\n\n    const [start, setStart] = useState(false);\n\n\n\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        const menu = menuRef.current;\n        const _corrdinate = coordinates[coordinates.length-1];\n        // Draw Context Menu \n        //\n        var rects = [];\n        //\n        rects.push(new rect(\"Red-Rectangle\", 15, 35, 65, 60, \"red\", \"black\", 10));\n        rects.push(new rect(\"Green-Rectangle\", 60, 80, 70, 50, \"green\", \"black\", 10));\n        rects.push(new rect(\"Blue-Rectangle\", 125, 25, 25, 25, \"blue\", \"black\", 10));\n\n        // if(!start)    \n        //     drawMenu(menu, coordinates[coordinates.length-1]);\n        // // clear the canvas area before rendering the coordinates held in state\n        // ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n        // // draw all coordinates held in state\n        // coordinates.forEach((coordinate)=>{\n        //     if(coordinate.type !== 'recon'){\n        //         draw(ctx, coordinate, coordinates, setClickedContract)\n        //     }else if(coordinate.parentId === _corrdinate.id || coordinate.id === _corrdinate.id){\n        //         draw(ctx, coordinate, coordinates, setClickedContract)\n        //         console.log(coordinate)\n        //     }\n        // });\n\n\n    });\n\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart, clickedContract, setClickedContract ];\n}\n","import { useEffect, useState } from 'react';\nimport {Layer, Stage} from 'react-konva';\nimport { Contract } from './useContract';\nimport { useCanvas } from './useCanvas';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nconst { REACT_APP_API_URL } = process.env;\n\nconst api = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\n\n\n\nfunction App() {\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart, clickedContract ] = useCanvas();\n  const [ currentCoord, setCurrentCoord ] = useState({})\n  const [ contractCoord, setContractCoord ] = useState({})\n  const [ reconCoord, setReconCord ] = useState(false)\n\n  window.addEventListener('contextmenu', function (e) { \n    e.preventDefault(); \n  }, false);\n  \n  const removeAllCorrdinates = async () => {\n    let iterations = coordinates.length;\n\n    for (const coordinate of coordinates) {\n      if(coordinate.id){\n        await api.delete(`${coordinate.id}`);\n      }\n\n      if (!--iterations)\n        setCoordinates([]);\n    }\n  }\n\n\n  const handleCanvasClick=(event)=>{\n    setStart(false)\n\n    let _currentCoord  = {\n      id: null,\n      parentId: null,\n      x: 100 / (canvasWidth / event.clientX), \n      y: 100 / (canvasHeight / event.clientY),\n      type: null\n    };\n    console.log(clickedContract)\n    console.log(_currentCoord)\n    console.log(contractCoord)\n\n    if(_.isEmpty(clickedContract)){\n      console.log('test')\n\n      // _currentCoord.parentId = ( clickedContract.type === 'contract')? clickedContract.id: null;\n      setCurrentCoord(_currentCoord);\n      setCoordinates([...coordinates, _currentCoord]);\n    } \n    // else if( clickedContract.type === 'contract' ){\n    //   _currentCoord.parentId = clickedContract.id\n    //   setCurrentCoord(clickedContract);\n    //   setCoordinates([...coordinates]);\n    // }\n    else{\n      console.log('yay')\n      setCurrentCoord(clickedContract);\n      setContractCoord(clickedContract)\n      setCoordinates([...coordinates, _currentCoord]);\n    }\n\n\n    // Object.assign(_currentCoord,\n    //   (reconCoord) ? { type: 'recon'} : null);\n\n    //   // api.post(\"\",{ ..._currentCoord })\n    //   // .then(res => {\n    //   //   setContractCoord(res.data)\n    //   //   setCoordinates([...coordinates, res.data]);\n    //   // })\n\n    // if(reconCoord) setReconCord(false);\n\n    // setCurrentCoord(_currentCoord);\n    // setCoordinates([...coordinates, _currentCoord]);\n    // console.log(_currentCoord)\n\n  };\n  const handleClearCanvas=(event)=>{\n    removeAllCorrdinates();\n  };\n\n  const doAddContract = (event) =>{\n    // currentCoord.type = 'contract' ;\n    // console.log(currentCoord)\n    // add the newest mouse location to an array in state \n    // api.post(\"\",{ ...currentCoord })\n    // .then(res => {\n    //   setContractCoord(res.data)\n    //   setCoordinates([...coordinates, res.data]);\n    // })\n\n  }\n  const doAddRecon = () =>{\n    setReconCord(true)\n    // const { x, y } = currentCoord;\n    // const _currentCoord = { parentId: clickedContract.id,  x, y, type: 'recon' };\n\n    // const canvasObj = canvasRef.current;\n    // const ctx = canvasObj.getContext('2d');\n\n    // ctx.canvas.addEventListener('mousemove', e => {\n    //   ctx.save();\n    //   ctx.clearRect(0, 0, canvasWidth, canvasHeight)\n\n    //   // Get the local x/y coordinates of the mouse on the canvas\n    //   let x = e.clientX;\n    //   let y = e.clientY;\n    //   // Draw a dot where the mouse is\n    //   ctx.beginPath();\n    //   ctx.arc(x, y, 10, 0, 2 * Math.PI, false);\n    //   ctx.fillStyle = 'white';\n    //   ctx.fill();\n    //   ctx.save();\n    //   ctx.restore();\n    // })\n    \n    // console.log(_currentCoord)\n    // setCoordinates([...coordinates, _currentCoord]);\n  }\n  const doRemove = () =>{\n    const _coordinates = coordinates.filter((obj) => {\n      return obj.x !== currentCoord.x && obj.y !== currentCoord.y\n    })\n    if(currentCoord.type === 'recon'){\n      setReconCord(false);\n    }\n\n    setCoordinates([..._coordinates]);\n  }\n\n  useEffect(() =>{\n    api.get()\n      .then(res => {\n        const _coordinates = res.data;\n        setStart(true)\n        setCoordinates(_coordinates);\n      })\n  },[setCoordinates, setStart])\n \n  return (\n    <main id=\"container\" className=\"App-main\" >\n        <Stage width={700} height={700}>\n        <Layer>\n            <Contract/>\n        </Layer>\n      </Stage>\n\n      {/* <img  src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\" >\n          { \n            !reconCoord && \n            <div className=\"contextMenu--contract\" onClick={doAddContract} >Start Contract</div>\n          }\n          { \n            (clickedContract.type === 'contract') && \n            <div className=\"contextMenu--recon\" onClick={doAddRecon} >Add Recon</div>\n          }\n          {\n            reconCoord && \n            <div className=\"contextMenu--remove\" onClick={doRemove} >Remove</div>\n          }\n      </div>\n\n      \n      <div className=\"clearButton\" style={{zIndex:1000}}>\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div> */}\n    </main>\n  );\n\n};\n\nexport default App;","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}