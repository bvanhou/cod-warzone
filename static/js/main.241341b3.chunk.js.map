{"version":3,"sources":["useCanvas.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["canvasWidth","Path2D","window","innerWidth","canvasHeight","innerHeight","api","axios","create","baseURL","process","App","canvasRef","useRef","menuRef","useState","coordinates","setCoordinates","clickedContract","setClickedContract","setStart","useEffect","current","getContext","_corrdinate","length","console","log","useCanvas","currentCoord","setCurrentCoord","setContractCoord","reconCoord","setReconCord","addEventListener","e","preventDefault","removeAllCorrdinates","a","coordinate","delete","id","res","get","then","_coordinates","data","className","src","warzone","alt","ref","width","height","onClick","event","screenPercentX","clientX","screenPercentY","clientY","_currentCoord","parentId","x","y","type","Object","assign","post","filter","obj","style","zIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.241341b3.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nfunction isIntersect(point, el) {\n    return Math.sqrt((point.x-el.x) ** 2 + (point.y - el.y) ** 2) < 10;\n}\n\nexport function draw(ctx, location, coordinates, setClickedContract){\n    if(location.type){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        ctx.fillStyle = location.type === 'contract' ? 'red': 'blue';\n        ctx.shadowColor = 'blue';\n        ctx.shadowBlur = 15;\n        ctx.save();\n        ctx.scale(SCALE, SCALE);\n        ctx.translate(locationX / SCALE - OFFSET, locationY / SCALE - OFFSET);\n        ctx.rotate(225 * Math.PI / 180);\n        ctx.fill(SVG_PATH);\n\n        ctx.canvas.addEventListener('click',(event)=> {\n            let x = 100 / (canvasWidth / event.clientX);\n            let y = 100 / (canvasHeight / event.clientY);\n            let contract = coordinates.find((element) => {\n                return element.type && isIntersect({ x, y }, element)\n            });\n            if(contract) setClickedContract(contract)\n        });\n        ctx.restore();  \n    }\n};\n\nexport const drawMenu = (menu, location) =>{\n    if(location){\n        let locationX = (canvasWidth * location.x) / 100;\n        let locationY = (canvasHeight * location.y) / 100;\n        menu.style.left = `${locationX}px`;\n        menu.style.top = `${locationY}px`;\n    }\n}\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n    const [clickedContract, setClickedContract] = useState({});\n\n    const [start, setStart] = useState(false);\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        const menu = menuRef.current;\n        const _corrdinate = coordinates[coordinates.length-1];\n        console.log(_corrdinate)\n        // Draw Context Menu \n        // if(!start && _corrdinate.type === undefined)    \n        //     drawMenu(menu, coordinates[coordinates.length-1]);\n        // // clear the canvas area before rendering the coordinates held in state\n        // ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n        // // draw all coordinates held in state\n        // coordinates.forEach((coordinate)=>{\n        //     console.log(_corrdinate)\n        //     console.log(coordinate)\n        //     // if(_corrdinate.type === undefined && coordinate.type === 'contract')\n        //         draw(ctx, coordinate, coordinates, setClickedContract)\n        //     // if(_corrdinate.type === 'contract' || coordinate.parentId === _corrdinate.id)\n        //         draw(ctx, coordinate, coordinates, setClickedContract)\n        // });\n\n\n    });\n\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart, clickedContract, setClickedContract ];\n}\n","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useEffect, useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport axios from 'axios';\n\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nconst { REACT_APP_API_URL } = process.env;\n\nconst api = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\n\n\n\nfunction App() {\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight, setStart, clickedContract ] = useCanvas();\n  const [ currentCoord, setCurrentCoord ] = useState({})\n  const [ contractCoord, setContractCoord ] = useState({})\n  const [ reconCoord, setReconCord ] = useState(false)\n\n  window.addEventListener('contextmenu', function (e) { \n    e.preventDefault(); \n  }, false);\n  \n  const removeAllCorrdinates = async () => {\n    for (const coordinate of coordinates) {\n      const res = await api.delete(`${coordinate.id}`);\n      console.log(res);\n    }\n    setCoordinates([]);\n  }\n\n\n  const handleCanvasClick=(event)=>{\n    setStart(false)\n\n    let screenPercentX = 100 / (canvasWidth / event.clientX);\n    let screenPercentY = 100 / (canvasHeight / event.clientY);\n    let _currentCoord  = {\n      parentId: clickedContract.id,\n      x: screenPercentX, \n      y: screenPercentY,\n      type: null\n    };\n\n    Object.assign(_currentCoord,\n      (reconCoord) ? { type: 'recon'} : null);\n\n      // api.post(\"\",{ ..._currentCoord })\n      // .then(res => {\n      //   setContractCoord(res.data)\n      //   setCoordinates([...coordinates, res.data]);\n      // })\n\n    if(reconCoord) setReconCord(false);\n\n    setCurrentCoord(_currentCoord);\n    setCoordinates([...coordinates, _currentCoord]);\n    console.log(_currentCoord)\n\n  };\n  const handleClearCanvas=(event)=>{\n    removeAllCorrdinates();\n  };\n\n  const doAddContract = (event) =>{\n    let screenPercentX = 100 / (canvasWidth / event.clientX);\n    let screenPercentY = 100 / (canvasHeight / event.clientY);\n    let _currentCoord  = { parentId: null, x: screenPercentX, y: screenPercentY, type: 'contract' };\n    // add the newest mouse location to an array in state \n    api.post(\"\",{ ..._currentCoord })\n    .then(res => {\n      setContractCoord(res.data)\n      setCoordinates([...coordinates, res.data]);\n    })\n\n  }\n  const doAddRecon = () =>{\n    setReconCord(true)\n    // const { x, y } = currentCoord;\n    // const _currentCoord = { parentId: clickedContract.id,  x, y, type: 'recon' };\n\n    // const canvasObj = canvasRef.current;\n    // const ctx = canvasObj.getContext('2d');\n\n    // ctx.canvas.addEventListener('mousemove', e => {\n    //   ctx.save();\n    //   ctx.clearRect(0, 0, canvasWidth, canvasHeight)\n\n    //   // Get the local x/y coordinates of the mouse on the canvas\n    //   let x = e.clientX;\n    //   let y = e.clientY;\n    //   // Draw a dot where the mouse is\n    //   ctx.beginPath();\n    //   ctx.arc(x, y, 10, 0, 2 * Math.PI, false);\n    //   ctx.fillStyle = 'white';\n    //   ctx.fill();\n    //   ctx.save();\n    //   ctx.restore();\n    // })\n    \n    // console.log(_currentCoord)\n    // setCoordinates([...coordinates, _currentCoord]);\n  }\n  const doRemove = () =>{\n    const _coordinates = coordinates.filter((obj) => {\n      return obj.x !== currentCoord.x && obj.y !== currentCoord.y\n    })\n    if(currentCoord.type === 'recon'){\n      setReconCord(false);\n    }\n\n    setCoordinates([..._coordinates]);\n  }\n\n  useEffect(() =>{\n    api.get()\n      .then(res => {\n        const _coordinates = res.data;\n        setStart(true)\n        setCoordinates(_coordinates);\n      })\n  },[setCoordinates, setStart])\n \n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img  src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onClick={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\" >\n          { \n            !reconCoord && \n            <div className=\"contextMenu--contract\" onClick={doAddContract} >Start Contract</div>\n          }\n          { \n            (clickedContract.type === 'contract') && \n            <div className=\"contextMenu--recon\" onClick={doAddRecon} >Add Recon</div>\n          }\n          <div className=\"contextMenu--remove\" onClick={doRemove} >Remove</div>\n      </div>\n       \n      \n      <div className=\"clearButton\" style={{zIndex:1000}}>\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div>\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}