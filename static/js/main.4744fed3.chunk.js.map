{"version":3,"sources":["useCanvas.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","menuRef","useState","coordinates","setCoordinates","useEffect","ctx","current","getContext","clearRect","position","menu","$","css","left","x","top","y","drawMenu","pop","forEach","coordinate","contract","recon","location","console","log","fillStyle","shadowColor","shadowBlur","save","scale","translate","rotate","Math","PI","fill","restore","draw","App","id","className","src","warzone","alt","ref","width","height","onContextMenu","event","currentCoord","clientX","clientY","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4744fed3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport $ from 'jquery'; \n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport function draw(ctx, location){\n  console.log(\"attempting to draw\")\n  ctx.fillStyle = location.contract ? 'red': 'blue';\n  ctx.shadowColor = 'blue';\n  ctx.shadowBlur = 15;\n  ctx.save();\n  ctx.scale(SCALE, SCALE);\n  ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n  ctx.rotate(225 * Math.PI / 180);\n  ctx.fill(SVG_PATH);\n  // .restore(): Canvas 2D API restores the most recently saved canvas state\n  ctx.restore();  \n};\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n\n    const drawMenu = (position) =>{\n        if(position){\n            const menu = menuRef.current;\n            $(menu).css({left:`${position.x}px`,top:`${position.y}px`});\n        }\n    }\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        drawMenu(coordinates.pop());\n\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{\n            if(coordinate.contract || coordinate.recon)\n                draw(ctx, coordinate)\n        });\n        // coordinates.filter(x => x.recon || x.contract)\n        // console.log(coordinates)\n\n    });\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\n}\n","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nfunction App() {\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ] = useCanvas();\n\n  const handleCanvasClick=(event)=>{\n    // console.log(event)\n    // if (event.type === 'click') {\n    //   console.log('Left click');\n    // } else if (event.type === 'contextmenu') {\n    //   console.log('Right click');\n    // }\n    const currentCoord = { x: event.clientX, y: event.clientY };\n    setCoordinates([...coordinates, currentCoord]);\n  };\n\n  const doAddContract = (event) =>{\n    console.log(event)\n    const currentCoord = { x: event.clientX, y: event.clientY, contract: true, recon: false };\n    setCoordinates([...coordinates, currentCoord]);\n  }\n  const doAddRecon = (event) =>{\n    const currentCoord = { x: event.clientX, y: event.clientY, contract: false, recon: true };\n    setCoordinates([...coordinates, currentCoord]);\n  }\n  const doRemove = (event) =>{\n    \n  }\n\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n\n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onContextMenu={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\">\n          <div className=\"contextMenu--option\" onClick={doAddContract}>Start Contract</div>\n          <div className=\"contextMenu--option\" onClick={doAddRecon}>Add Recon</div>\n          <div className=\"contextMenu--option\" onClick={doRemove}>Remove</div>\n      </div>\n       \n      \n      <div className=\"clearButton\" >\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div>\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}