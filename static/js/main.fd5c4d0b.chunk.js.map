{"version":3,"sources":["useCanvas.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","menuRef","useState","coordinates","setCoordinates","useEffect","ctx","current","getContext","menu","position","style","left","x","top","y","drawMenu","length","clearRect","forEach","coordinate","location","console","log","type","fillStyle","shadowColor","shadowBlur","save","scale","translate","rotate","Math","PI","fill","restore","draw","api","axios","create","baseURL","process","App","currentCoord","setCurrentCoord","contractCoord","setContractCoord","addEventListener","e","preventDefault","get","then","res","_coordinates","data","id","className","src","warzone","alt","ref","width","height","onContextMenu","event","_currentCoord","clientX","clientY","onClick","parentId","post","filter","obj","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd5c4d0b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport $ from 'jquery'; \n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport function draw(ctx, location){\n    console.log(location)\n    if(location.type){\n        ctx.fillStyle = location.type === 'contract' ? 'red': 'blue';\n        ctx.shadowColor = 'blue';\n        ctx.shadowBlur = 15;\n        ctx.save();\n        ctx.scale(SCALE, SCALE);\n        ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n        ctx.rotate(225 * Math.PI / 180);\n        ctx.fill(SVG_PATH);\n        // .restore(): Canvas 2D API restores the most recently saved canvas state\n        ctx.restore();  \n    }\n};\n\nexport const drawMenu = (menu, position) =>{\n    if(position){\n        menu.style.left = `${position.x}px`;\n        menu.style.top = `${position.y}px`;\n    }\n}\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        const menu = menuRef.current;\n        // Draw Context Menu     \n        drawMenu(menu, coordinates[coordinates.length-1]);\n\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{\n            draw(ctx, coordinate)\n        });\n\n\n    });\n\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\n}\n","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useEffect, useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport axios from 'axios';\n\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nconst { REACT_APP_API_URL } = process.env;\n\nconst api = axios.create({\n  baseURL: REACT_APP_API_URL,\n});\n\n\nfunction App() {\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ] = useCanvas();\n  const [ currentCoord, setCurrentCoord ] = useState({})\n  const [ contractCoord, setContractCoord ] = useState({})\n\n  window.addEventListener('contextmenu', function (e) { \n    e.preventDefault(); \n  }, false);\n\n  const handleCanvasClick=(event)=>{\n    let _currentCoord  = { x: event.clientX, y: event.clientY }\n    // on each click get current mouse location \n    setCurrentCoord(_currentCoord);\n    // add the newest mouse location to an array in state \n    setCoordinates([...coordinates, _currentCoord]);\n  };\n\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n\n  const doAddContract = () =>{\n\n    // on each click get current mouse location \n    const { x, y } = currentCoord;\n    // setCurrentCoord({ x: event.clientX, y: event.clientY });\n    const _currentCoord = { parentId: null, x, y, type: 'contract' };\n    console.log(_currentCoord)\n    // add the newest mouse location to an array in state \n    api.post(\"/\",{ _currentCoord })\n    .then(res => {\n      setContractCoord(res.data)\n      setCoordinates([...coordinates, _currentCoord]);\n    })\n\n  }\n  const doAddRecon = () =>{\n    const { x, y } = currentCoord;\n    const _currentCoord = { parentId: contractCoord.id,  x, y, type: 'recon' };\n    console.log(_currentCoord)\n\n    setCoordinates([...coordinates, _currentCoord]);\n  }\n  const doRemove = () =>{\n    const _coordinates = coordinates.filter((obj) => {\n      return obj.x !== currentCoord.x && obj.y !== currentCoord.y\n    })\n    setCoordinates([..._coordinates]);\n\n  }\n\n  useEffect(() =>{\n    api.get()\n      .then(res => {\n        const _coordinates = res.data;\n        setCoordinates(_coordinates);\n      })\n  },[])\n \n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img  src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onContextMenu={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\" >\n          <div className=\"contextMenu--contract\" onClick={doAddContract} >Start Contract</div>\n          <div className=\"contextMenu--recon\" onClick={doAddRecon} >Add Recon</div>\n          <div className=\"contextMenu--remove\" onClick={doRemove} >Remove</div>\n      </div>\n       \n      \n      <div className=\"clearButton\" >\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div>\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}