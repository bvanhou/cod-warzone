{"version":3,"sources":["useCanvas.js","map-overview-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["SVG_PATH","Path2D","SCALE","canvasWidth","window","innerWidth","canvasHeight","innerHeight","useCanvas","canvasRef","useRef","menuRef","useState","coordinates","setCoordinates","useEffect","ctx","current","getContext","menu","position","style","left","x","top","y","drawMenu","length","clearRect","forEach","coordinate","location","console","log","contract","recon","fillStyle","shadowColor","shadowBlur","save","scale","translate","rotate","Math","PI","fill","restore","draw","App","currentCoord","setCurrentCoord","addEventListener","e","preventDefault","id","className","src","warzone","alt","ref","width","height","onContextMenu","event","clientX","clientY","onClick","_currentCoord","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.425caace.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport $ from 'jquery'; \n\n// Path2D for a Heart SVG\nconst heartSVG = \"M0 200 v-200 h200 a100,100 90 0,1 0,200 a100,100 90 0,1 -200,0 z\"\nconst SVG_PATH = new Path2D(heartSVG);\n\n// Scaling Constants for Canvas\nconst SCALE = 0.05;\nconst OFFSET = 80;\nexport const canvasWidth = window.innerWidth;\nexport const canvasHeight = window.innerHeight;\n\nexport function draw(ctx, location){\n  console.log(\"attempting to draw\")\n  if(location.contract || location.recon){\n    ctx.fillStyle = location.contract ? 'red': 'blue';\n    ctx.shadowColor = 'blue';\n    ctx.shadowBlur = 15;\n    ctx.save();\n    ctx.scale(SCALE, SCALE);\n    ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n    ctx.rotate(225 * Math.PI / 180);\n    ctx.fill(SVG_PATH);\n    // .restore(): Canvas 2D API restores the most recently saved canvas state\n    ctx.restore();  \n  }\n};\n\nexport const drawMenu = (menu, position) =>{\n    if(position){\n        menu.style.left = `${position.x}px`;\n        menu.style.top = `${position.y}px`;\n    }\n}\n\nexport function useCanvas(){\n    const canvasRef = useRef(null);\n    const menuRef = useRef(null);\n\n    const [coordinates, setCoordinates] = useState([]);\n\n\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        const menu = menuRef.current;\n        // Draw Context Menu        \n        drawMenu(menu, coordinates[coordinates.length-1]);\n\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n        // draw all coordinates held in state\n        coordinates.forEach((coordinate)=>{\n            draw(ctx, coordinate)\n        });\n\n\n    });\n\n\n    return [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ];\n}\n","export default __webpack_public_path__ + \"static/media/map-overview-bg.ccfc7476.jpg\";","import { useState } from 'react';\nimport { useCanvas } from './useCanvas';\nimport warzone from './map-overview-bg.jpg';\nimport './App.css';\n\nfunction App() {\n  const [ menuRef, coordinates, setCoordinates, canvasRef, canvasWidth, canvasHeight ] = useCanvas();\n  const [ currentCoord, setCurrentCoord ] = useState({})\n\n  window.addEventListener('contextmenu', function (e) { \n    e.preventDefault(); \n  }, false);\n\n  const handleCanvasClick=(event)=>{\n    console.log('menu test')\n    // on each click get current mouse location \n    setCurrentCoord({ x: event.clientX, y: event.clientY });\n    // add the newest mouse location to an array in state \n    setCoordinates([...coordinates, currentCoord]);\n  };\n\n  const handleClearCanvas=(event)=>{\n    setCoordinates([]);\n  };\n\n\n\n  const doAddContract = (event) =>{\n    // on each click get current mouse location \n    const { x, y } = currentCoord;\n    // setCurrentCoord({ x: event.clientX, y: event.clientY });\n\n    const _currentCoord = { x, y, contract: true, recon: false };\n    // add the newest mouse location to an array in state \n    setCoordinates([...coordinates, _currentCoord]);\n  }\n  const doAddRecon = (event) =>{\n    const { x, y } = currentCoord;\n    const _currentCoord = { x, y, contract: false, recon: true };\n    setCoordinates([...coordinates, _currentCoord]);\n  }\n  const doRemove = (event) =>{\n  }\n \n  return (\n    <main id=\"container\" className=\"App-main\" >\n      <img  src={warzone} className=\"img-warzone\" alt=\"logo\" />\n  \n      <canvas \n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        onContextMenu={handleCanvasClick} />\n\n      <div ref={menuRef} id=\"contextMenu\" >\n          <div className=\"contextMenu--contract\" onClick={doAddContract} >Start Contract</div>\n          <div className=\"contextMenu--recon\" onClick={doAddRecon} >Add Recon</div>\n          <div className=\"contextMenu--remove\" onClick={doRemove} >Remove</div>\n      </div>\n       \n      \n      <div className=\"clearButton\" >\n        <button onClick={handleClearCanvas} > Clear Map </button>\n      </div>\n    </main>\n  );\n\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}